/*CREATE DATABASE Cofetarie;

GO*/

USE Cofetarie;

CREATE TABLE TipClient
( cod_tip_client INT PRIMARY KEY IDENTITY,
  categorie_client NVARCHAR(100) NOT NULL,
  reducere_aplicata INT
);

CREATE TABLE TipComanda
( cod_tip_comanda INT PRIMARY KEY IDENTITY,
  tip_comanda NVARCHAR(100) NOT NULL UNIQUE,
  descriere NVARCHAR(100) 
);

CREATE TABLE RatingProdus
( cod_rating INT PRIMARY KEY IDENTITY,
  numar_stele INT,
  descriere NVARCHAR(100) NOT NULL,
);

CREATE TABLE TipProdus
( cod_tip_produs INT PRIMARY KEY IDENTITY,
  categorie_produs NVARCHAR(100) NOT NULL,
  descriere NVARCHAR(100) 
);

CREATE TABLE TipAlergeni
( cod_tip_alergeni INT PRIMARY KEY IDENTITY,
  nume NVARCHAR(100) NOT NULL,
  descriere NVARCHAR(100) 
);

CREATE TABLE Produs
( cod_produs INT PRIMARY KEY IDENTITY,
  nume NVARCHAR(100) NOT NULL UNIQUE,
  valabiliatet NVARCHAR(100) NOT NULL,
  pret FLOAT,
  cod_alergeni INT FOREIGN KEY REFERENCES TipAlergeni(cod_tip_alergeni) ON UPDATE CASCADE ON DELETE CASCADE,
  cod_tip_produs INT FOREIGN KEY REFERENCES TipProdus(cod_tip_produs) ON UPDATE CASCADE ON DELETE CASCADE,
  cod_rating INT FOREIGN KEY REFERENCES RatingProdus(cod_rating) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Client
( cod_client INT PRIMARY KEY IDENTITY,
  nume_client NVARCHAR(100) NOT NULL UNIQUE,
  adresa_client NVARCHAR(100) NOT NULL UNIQUE,
  cod_tip_client INT FOREIGN KEY REFERENCES TipClient(cod_tip_client) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Personal
( cod_personal INT PRIMARY KEY IDENTITY,
  nume_personal NVARCHAR(100) NOT NULL ,
  email_personal NVARCHAR(100) ,
  telefon_personal NVARCHAR(100)
);

CREATE TABLE Comanda
( cod_comanda INT PRIMARY KEY IDENTITY,
  data_comanda DATE,
  cod_tip_comanda INT FOREIGN KEY REFERENCES TipComanda( cod_tip_comanda) ON UPDATE CASCADE ON DELETE CASCADE,
  cod_client INT FOREIGN KEY REFERENCES Client( cod_client) ON UPDATE CASCADE ON DELETE CASCADE,
  cod_persona INT FOREIGN KEY REFERENCES Personal(cod_personal) ON UPDATE CASCADE ON DELETE CASCADE
);
  
CREATE TABLE ComandaProdus
( cod_comanda INT FOREIGN KEY REFERENCES  Comanda( cod_comanda) ON UPDATE CASCADE ON DELETE CASCADE,
  cod_produs INT FOREIGN KEY REFERENCES Produs( cod_produs) ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT pk_ComandaProdus  PRIMARY KEY(cod_comanda,cod_produs)
);

USE Cofetarie;

/*
--Personal:
INSERT INTO Personal(nume_personal, email_personal,telefon_personal)
VALUES(N'Andrei Popescu',N'andrei.popescu@gmail.com',N'0770234242'),
      (N'Mihai Bucur',N'mihai.bucur@gmail.com',N'0771789121'),
	  (N'Bogdan Asavistei',N'bogdan.asavistei@gmail.com',N'0771223890');

--Bucatar:
INSERT INTO Bucatar(nume,email,telefon,experienta)
VALUES(N'Flavius Simbotin',N'flavius.simbotin@gmail.com',N'0770386118',N'profesionist'),
      (N'Marius Istrate',N'marius.istrate@yahoo.com',N'7771458990',N'incepator');

--TipComanda:
INSERT INTO TipComanda(tip_comanda,descriere)
VALUES (N'online',N'se va livra cu Glovo'),
       (N'in magazin',N'se face in magazin'),
	   (N'la telefon',N'se va livra cu livratorul');
--TipClient:
INSERT INTO TipClient(categorie_client,reducere_aplicata)
VALUES (N'student/elev',15),
       (N'pensionar',25),
	   (N'fara categorie',0),
	   (N'client fidel',10);

--RatingProduse
INSERT INTO RatingProdus(numar_stele,descriere)
VALUES (1,N'nivel slab de calitate'),
       (2,N'ingrediente de nivel mediu'),
	   (3,N'nivel peste mediu de calitate'),
	   (4,N'printre cele mai calititative produse'),
	   (5,N'ingrediente de calitate inalta');

--TipProdus
INSERT INTO TipProdus(categorie_produs,descriere)
VALUES  (N'vegan',N'exclude tot ce È›ine de produse animale'),
        (N'vegetarian',N'exclude produsele animale'),
		(N'lacto-ovo-vegetarian',N'vegetarian, ce include oua si lapte'),
		(N'lacto-vegetarian',N'vegetarian, ce include lapte'),
		(N'ovo-vegetarian',N'vegetarian, ce include oua');

--TipAlergeni
INSERT INTO TipAlergeni(nume,descriere)
VALUES (N'lapte',N'contine lapte si produse pe baza de lapte'),
       (N'ou',N'contine oua si produse pe baza de oua'),
	   (N'arahide',N'contine arahide si produse pe baza de arahide'),
	   (N'soia',N'contine soia si produse pe baza de soia'),
	   (N'gluten',N'ceriale care contin gluten(grau,secara,ovaz,orz)'),
	   (N'fructe cu coaja',N'contine nuci, alune,migdale,caju si produse derivate');

--Client
INSERT INTO Client(nume_client,adresa_client,cod_tip_client)
VALUES (N'Andrei Aoki',N'Str. Gheorghe Bucur nr.28',1),
       (N'Simpetru Gabriel',N'Str. Bogdan Voda nr.32',4),
	   (N'Maria Pop',N'Str. Mircea Anton nr.193',3),
	   (N'Chiuta Ion',N'Str. Eugen Ionesci nr.2',2),
	   (N'Casandra Munteanu',N'Str. Anton Panu nr.23',1),
	   (N'Darius Chirila',N'Str. Ion Creanga nr.22',3),
	   (N'Antonia Pascal',N'Str. Mihai Eminescu nr.78',4);

--Produs

INSERT INTO Produs(nume,valabiliatet,pret,cod_alergeni,cod_tip_produs,cod_rating,cod_bucatar)
VALUES (N'Tofifee',N'20.04.2022',4.0,3,1,3,2), 
       (N'Tort cu zmeura si ciocolata',N'20.04.2022',23.0,6,1,4,1),
	   (N'Tort cu ciocolata si capsuni',N'20.04.2022',23.0,6,1,4,1),
	   (N'Biscuiti cu crema de fistic',N'20.04.2022',7.0,6,4,3,2),
	   (N'Brownie',N'20.04.2022',13,6,1,3,1);

--Comanda

INSERT INTO Comanda(data_comanda,cod_tip_comanda,cod_client,cod_personal)
VALUES ('2022-11-04',6,1,1),
       ('2022-4-12',7,3,2),
       ('2022-4-11',5,5,3),
       ('2022-4-11',7,3,1);


--Comanda Produs

INSERT INTO ComandaProdus(cod_comanda,cod_produs)
VALUES (1,5),
       (2,3),
	(3,4),
	 (4,1);
*/

--proceduri

USE Cofetarie;

--MODIFICA TIPUL UNEI COLOANE;
GO
CREATE PROCEDURE DateToDateTimeComanda
AS 
BEGIN
     ALTER TABLE Comanda
	 ALTER COLUMN data_comanda datetime;
END

GO
CREATE PROCEDURE UNDO1
AS 
BEGIN
     ALTER TABLE Comanda
	 ALTER COLUMN data_comanda date;
END

GO
 -- ADAUGA O CONSTANGERE DE "VALOARE IMPLICITA" PENTRU UN CAMP

 CREATE PROCEDURE ADDConstrangereDescriere
 AS 
 BEGIN
      ALTER TABLE TipAlergeni
	  ADD CONSTRAINT df_descriere DEFAULT N'Nu exista descriere' FOR descriere;
 END;
 GO
 EXEC ADDConstrangereDescriere;


GO
CREATE PROCEDURE UNDO2 
AS
BEGIN
    ALTER TABLE TipAlergeni
	DROP CONSTRAINT df_descriere;
END;



--CREEAZA/STERGE O TABELA;

GO
CREATE PROCEDURE AdaugaTabela
AS 
BEGIN
     CREATE TABLE PodusulSaptamanii
	 ( cod_ps INT PRIMARY KEY IDENTITY,
	   nume NVARCHAR(100),
	   reducere INT 
	 );
END;

GO 
CREATE PROCEDURE StergeTabela 
AS
BEGIN
    GRANT DROP ON TABLE ProdusulSaptamanii
END;

GO
EXEC StergeTabela;


///LAB5
--Operratii CRUD pentru cele 3 tabele: Produs, ComandaProdus,Comanda 
USE Cofetarie;
GO
--Tabela Produs
--functie pentru validare
CREATE OR ALTER FUNCTION ValidareProdus(@nume NVARCHAR(100),@valabilitate NVARCHAR(100),@pret FLOAT,@cod_alergeni INT,@cod_tip_produs INT,@cod_rating INT,@cod_bucatar INT)
RETURNS NVARCHAR(100)
AS
BEGIN
     IF(@nume='' OR 
	 @valabilitate='' OR 
	 @pret < 0 OR 
	 NOT(EXISTS(SELECT cod_tip_alergeni FROM TipAlergeni WHERE cod_tip_alergeni = @cod_alergeni)) OR
	 NOT(EXISTS(SELECT cod_tip_produs FROM TipProdus WHERE cod_tip_produs = @cod_tip_produs)) OR
	 NOT(EXISTS(SELECT cod_rating FROM RatingProdus WHERE cod_rating = @cod_rating)) OR
	 NOT(EXISTS(SELECT cod_bucatar FROM Bucatar WHERE cod_bucatar = @cod_bucatar)))
	    RETURN 'invalid'
	return 'valid'
END;
GO

--functie pentru a verifica existenta unui cod in tabela de Produs
CREATE OR ALTER FUNCTION VerCodProdus( @cod_produs INT)
RETURNS VARCHAR(20)
AS
BEGIN
    IF((EXISTS(SELECT cod_produs FROM Produs WHERE cod_produs = @cod_produs)))
	  RETURN 'exista'
    return 'nu exista'
END;
GO

--operatii CRUD
--CREATE/INSERT
CREATE OR ALTER PROCEDURE CreateProdus @nume NVARCHAR(100),@valabilitate NVARCHAR(100),@pret FLOAT,@cod_alergeni INT,@cod_tip_produs INT,@cod_rating INT,@cod_bucatar INT
AS 
BEGIN
    IF (dbo.ValidareProdus(@nume ,@valabilitate ,@pret ,@cod_alergeni ,@cod_tip_produs,@cod_rating ,@cod_bucatar ) ='valid')
	    INSERT INTO Produs(nume ,valabiliatet ,pret ,cod_alergeni ,cod_tip_produs,cod_rating ,cod_bucatar) VALUES
		(@nume ,@valabilitate ,@pret ,@cod_alergeni ,@cod_tip_produs,@cod_rating ,@cod_bucatar );
	ELSE
	    PRINT 'NU SE POATE REALIZA CREAREA DEOARECE DATELE SUNT INVALIDE';
END;


--READ/SELECT
G
CREATE OR ALTER PROCEDURE ReadProdus @cod_produs INT
AS 
BEGIN 
    IF(dbo.VerCodProdus(@cod_produs)='exista')
	  SELECT * FROM Produs WHERE cod_produs = @cod_produs
	ELSE
	  PRINT 'NU EXISTA PRODUSUL CU ACEST COD'
END;

GO

--UPDATE
CREATE OR ALTER PROCEDURE UpdateProdus @cod_produs INT,@nume NVARCHAR(100),@valabilitate NVARCHAR(100),@pret FLOAT,@cod_alergeni INT,@cod_tip_produs INT,@cod_rating INT,@cod_bucatar INT
AS
BEGIN
     IF(dbo.VerCodProdus(@cod_produs)='nu exista')
	    PRINT 'NU EXISTA PRODUS CU ACEST COD'
	ELSE IF(dbo.ValidareProdus(@nume ,@valabilitate ,@pret ,@cod_alergeni ,@cod_tip_produs,@cod_rating ,@cod_bucatar)='valid')
	BEGIN
	   UPDATE Produs
	   SET nume = @nume,valabiliatet=@valabilitate, pret = @pret,cod_alergeni = @cod_alergeni,cod_tip_produs=@cod_tip_produs,cod_rating=@cod_rating,cod_bucatar = @cod_bucatar
	   WHERE cod_produs = @cod_produs
	END
	  ELSE
	   PRINT 'DATELE INTODUSE NU SUNT CORECTE'
END;

EXEC UpdateProdus 27170 ,'Broscuta','20.05.2022',5,3,1,316536,2

	   
SELECT * from Produs

--DELETE
GO
CREATE OR ALTER PROCEDURE DeleteProdus @cod_produs INT
AS
BEGIN
    IF(dbo.VerCodProdus(@cod_produs)='nu exista')
	   PRINT 'NU EXISTA PRODUS CU ACEST COD'
	ELSE
	   DELETE FROM Produs WHERE cod_produs = @cod_produs
END;


--Tabela Comanda
--functie pentru validare
GO
CREATE OR ALTER FUNCTION ValidareComanda (@data_comanda DATETIME, @cod_tip_comanda INT, @cod_client INT, @cod_personal INT)
RETURNS NVARCHAR(50)
AS 
BEGIN 
   IF(--ISDATE(@data_comanda)=0 OR
      NOT(@data_comanda LIKE '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]')OR 
      NOT(EXISTS(SELECT cod_tip_comanda FROM TipComanda WHERE cod_tip_comanda = @cod_tip_comanda)) OR
	  NOT(EXISTS(SELECT cod_client FROM Client WHERE cod_client = @cod_client)) OR
	  NOT(EXISTS(SELECT cod_personal FROM Personal WHERE cod_personal = @cod_personal)))
	    RETURN 'invalid'
	RETURN 'valid'
END;
go
--functie pentru a verifica existenta unui cod in tabela de Comanda
CREATE OR ALTER FUNCTION VerCodComanda( @cod_comanda INT)
RETURNS VARCHAR(20)
AS
BEGIN
    IF((EXISTS(SELECT cod_comanda FROM Comanda WHERE cod_comanda = @cod_comanda)))
	  RETURN 'exista'
    return 'nu exista'
END;
GO

-- CREATE/INSERT
CREATE OR ALTER PROCEDURE CreateComanda @data_comanda DATETIME,@cod_tip_comanda INT,@cod_client INT,@cod_personal INT
AS 
BEGIN
    IF(dbo.ValidareComanda(@data_comanda ,@cod_tip_comanda,@cod_client,@cod_personal)='valid')
	   INSERT INTO Comanda(data_comanda,cod_tip_comanda,cod_client,cod_personal) 
	   VALUES(@data_comanda ,@cod_tip_comanda,@cod_client,@cod_personal)
	ELSE 
	   PRINT 'NU SE POATE REALIZA CREAREA DEOARECE DATELE SUNT INVALIDE'
END;

--READ/SELECT 
GO
CREATE OR ALTER PROCEDURE ReadComanda @cod_comanda INT
AS 
BEGIN
    IF(dbo.VerCodComanda(@cod_comanda)!='exista')
	   PRINT 'NU EXISTA COMANDA CU ACEST COD'
	ELSE
	   SELECT *  FROM Comanda WHERE cod_comanda = @cod_comanda
END;

--UPDATE
GO
CREATE OR ALTER PROCEDURE UpdateComanda @cod_comanda INT, @data_comanda DATETIME,@cod_tip_comanda INT,@cod_client INT,@cod_personal INT
AS
BEGIN
     IF(dbo.VerCodComanda(@cod_comanda)='nu exista')
	    PRINT 'NU EXISTA COMANDA CU ACEST COD'
	ELSE IF(dbo.ValidareComanda(@data_comanda ,@cod_tip_comanda,@cod_client,@cod_personal)='valid')
	BEGIN
	   UPDATE Comanda
	   SET data_comanda=@data_comanda,cod_tip_comanda=@cod_tip_comanda,cod_client =@cod_client,cod_personal=@cod_personal 
	   WHERE cod_comanda=@cod_comanda
	END
	  ELSE
	   PRINT 'DATELE INTODUSE NU SUNT CORECTE'
END;

--DELETE
GO
CREATE OR ALTER PROCEDURE DeleteComanda @cod_comanda INT
AS
BEGIN
    IF(dbo.VerCodComanda(@cod_comanda)='nu exista')
	   PRINT 'NU EXISTA COMANDA CU ACEST COD'
	ELSE
	   DELETE FROM Comanda WHERE cod_comanda = @cod_comanda
END;


SELECT * FROM Comanda

--Tabela ComandaProdus
--functie pentru validare
GO
CREATE OR ALTER FUNCTION ValidareComandaProdus (@nr_produse INT)
RETURNS NVARCHAR(50)
AS 
BEGIN 
   IF(@nr_produse < 0)
	    RETURN 'invalid'
	RETURN 'valid'
END;
go

--functie pentru a verifica existenta unui cod in tabela de Comanda
CREATE OR ALTER FUNCTION VerCodComandaProdus( @cod_comanda INT,@cod_produs INT)
RETURNS VARCHAR(20)
AS
BEGIN
    IF((EXISTS(SELECT cod_comanda FROM ComandaProdus WHERE cod_comanda = @cod_comanda)) AND ((EXISTS(SELECT cod_produs FROM ComandaProdus WHERE cod_produs = @cod_produs))))
	  RETURN 'exista'
    RETURN 'nu exista'
END;
GO

SELECT * FROM ComandaProdus






